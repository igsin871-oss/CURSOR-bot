import os
import logging
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ BOT_TOKEN=\"–í–ê–®_–¢–û–ö–ï–ù\"")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –¢–û–õ–¨–ö–û –¢–ï–ö–°–¢, –ë–ï–ó –ö–ù–û–ü–û–ö"""
    if not update.message:
        return
    
    user_name = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
    text = (
        f"üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–±–µ–ª—å–Ω—É—é —Å—Ç—É–¥–∏—é –ï–≤—Ä–æ—Å–æ–±–∞, {user_name}!\n\n"
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—É—é –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n"
        "üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n\n"
        "üìè –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä ‚Äî /measure\n"
        "üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî /price\n"
        "üé® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç ‚Äî /design\n"
        "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç ‚Äî /portfolio\n"
        "üè¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —à–æ—É—Ä—É–º ‚Äî /showroom\n"
        "üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî /contacts\n"
        "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ (–æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å) ‚Äî /help\n\n"
        "üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç ‚Äî —è –ø–æ–π–º—É –∏ –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!"
    )
    
    await update.message.reply_text(text)

async def measure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"""
    await update.message.reply_text("üìè –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä: –æ—Å—Ç–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –º—ã —Å–≤—è–∂–µ–º—Å—è.")

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"""
    await update.message.reply_text("üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å–º–µ—Ç—É.")

async def design(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç"""
    await update.message.reply_text("üé® –î–∏–∑–∞–π–Ω‚Äë–ø—Ä–æ–µ–∫—Ç: –ø—Ä–∏—à–ª–∏—Ç–µ –ø–ª–∞–Ω –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ü–µ–ø—Ç.")

async def portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    await update.message.reply_text("üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –æ—Ç–ø—Ä–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à.")

async def showroom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–®–æ—É—Ä—É–º"""
    await update.message.reply_text("üè¢ –®–æ—É—Ä—É–º: –∞–¥—Ä–µ—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∏–∑–∏—Ç?")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã"""
    await update.message.reply_text("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: —Ç–µ–ª–µ—Ñ–æ–Ω, WhatsApp, email. –ß–µ–º —É–¥–æ–±–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–º–æ—â—å"""
    await update.message.reply_text("ü§ñ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ - –¢–û–õ–¨–ö–û –ö–û–ú–ê–ù–î–´, –ë–ï–ó –ö–ù–û–ü–û–ö
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("measure", measure))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("design", design))
    application.add_handler(CommandHandler("portfolio", portfolio))
    application.add_handler(CommandHandler("showroom", showroom))
    application.add_handler(CommandHandler("contacts", contacts))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
    async def _set_commands(app: Application) -> None:
        await app.bot.set_my_commands([
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("measure", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"),
            BotCommand("price", "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"),
            BotCommand("design", "–î–∏–∑–∞–π–Ω‚Äë–ø—Ä–æ–µ–∫—Ç"),
            BotCommand("portfolio", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç"),
            BotCommand("showroom", "–®–æ—É—Ä—É–º"),
            BotCommand("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
        ])

    application.post_init = _set_commands

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main()
