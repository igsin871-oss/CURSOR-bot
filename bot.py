import os
import logging
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, InputMediaPhoto
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ BOT_TOKEN=\"–í–ê–®_–¢–û–ö–ï–ù\"")

def build_welcome_text(first_name: str | None) -> str:
    user_name = first_name or "–¥—Ä—É–≥"
    return (
        f"üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–±–µ–ª—å–Ω—É—é —Å—Ç—É–¥–∏—é –ï–≤—Ä–æ—Å–æ–±–∞, {user_name}!\n\n"
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—É—é –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n"
        "üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n\n"
        "üìè –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä ‚Äî /measure\n"
        "üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî /price\n"
        "üé® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç ‚Äî /design\n"
        "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç ‚Äî /portfolio\n"
        "üè¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —à–æ—É—Ä—É–º ‚Äî /showroom\n"
        "üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî /contacts\n"
        "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ (–æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å) ‚Äî /help\n\n"
        "üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç ‚Äî —è –ø–æ–π–º—É –∏ –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!"
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return
    text = build_welcome_text(update.effective_user.first_name if update.effective_user else None)
    await update.message.reply_text(text)


async def on_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if not update.message:
        return
    cmd = update.message.text.lstrip("/").split()[0]
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Ç–µ–º–∏ –∂–µ —Ç–µ–∫—Å—Ç–∞–º–∏, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    mapping = {
        "measure": "üìè –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä: –æ—Å—Ç–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –º—ã —Å–≤—è–∂–µ–º—Å—è.",
        "price": "üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å–º–µ—Ç—É.",
        "portfolio": "üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –æ—Ç–ø—Ä–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à.",
        "showroom": "üè¢ –®–æ—É—Ä—É–º: –∞–¥—Ä–µ—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∏–∑–∏—Ç?",
        "contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: —Ç–µ–ª–µ—Ñ–æ–Ω, WhatsApp, email. –ß–µ–º —É–¥–æ–±–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?",
        "help": "ü§ñ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
        "start": build_welcome_text(update.effective_user.first_name if update.effective_user else None),
    }
    if cmd == "design":
        # –î–ª—è /design –∑–∞–ø—É—Å–∫–∞–µ–º –∫–≤–∏–∑ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await design_quiz(update, context)
        return
    reply = mapping.get(cmd, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    # –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await update.message.reply_text(reply)


# =============================
# –ö–≤–∏–∑: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–ª–∞–π–¥–æ–≤
# =============================

# –ö–æ–¥—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
CATEGORY_DISPLAY: dict[str, str] = {
    "kitchen": "üçΩ –ö–£–•–ù–Ø",
    "living": "üõã –ì–û–°–¢–ò–ù–ê–Ø",
    "wardrobe": "üß• –ì–ê–†–î–ï–†–û–ë–ù–ê–Ø",
    "cabinets": "üìö –®–ö–ê–§–´",
    "library": "üìñ –ë–ò–ë–õ–ò–û–¢–ï–ö–ê",
    "other": "‚úèÔ∏è –î–†–£–ì–û–ï",
}

CATEGORY_ORDER: list[str] = [
    "kitchen",
    "living",
    "wardrobe",
    "cabinets",
    "library",
    "other",
]

def _build_categories_keyboard(selected: set[str]) -> InlineKeyboardMarkup:
    buttons: list[list[InlineKeyboardButton]] = []
    # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    row: list[InlineKeyboardButton] = []
    for idx, code in enumerate(CATEGORY_ORDER):
        title = CATEGORY_DISPLAY[code]
        is_selected = code in selected
        label = ("‚úÖ " + title) if is_selected else title
        row.append(InlineKeyboardButton(text=label, callback_data=f"cat:{code}"))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    # –ö–Ω–æ–ø–∫–∞ –ì–æ—Ç–æ–≤–æ
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="cat_done")])
    return InlineKeyboardMarkup(buttons)


async def design_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞: –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–±–µ–ª–∏."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    selected: set[str] = set()
    context.user_data["selected_categories"] = selected

    text = (
        "üé® –î–∏–∑–∞–π–Ω‚Äë–ø—Ä–æ–µ–∫—Ç: –ø—Ä–∏—à–ª–∏—Ç–µ –ø–ª–∞–Ω –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ü–µ–ø—Ç.\n\n"
        "–ö–∞–∫–∞—è –º–µ–±–µ–ª—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=_build_categories_keyboard(selected))
    elif update.callback_query and update.callback_query.message:
        await update.callback_query.message.reply_text(text, reply_markup=_build_categories_keyboard(selected))


async def on_category_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    query = update.callback_query
    if not query or not query.data:
        return
    await query.answer()

    code = query.data.split(":", maxsplit=1)[1]
    selected: set[str] = context.user_data.get("selected_categories", set())
    if code in selected:
        selected.remove(code)
    else:
        selected.add(code)
    context.user_data["selected_categories"] = selected

    # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if query.message:
        try:
            await query.message.edit_reply_markup(reply_markup=_build_categories_keyboard(selected))
        except Exception as exc:  # noqa: BLE001 - –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: %s", exc)


def _slides_count_for_category(code: str) -> int:
    if code == "kitchen":
        return 6
    if code == "other":
        return 1
    return 4


def _build_slides_keyboard(code: str) -> InlineKeyboardMarkup:
    total = _slides_count_for_category(code)
    buttons: list[list[InlineKeyboardButton]] = []
    row: list[InlineKeyboardButton] = []
    for i in range(1, total + 1):
        row.append(InlineKeyboardButton(text=f"–°–ª–∞–π–¥ {i}", callback_data=f"slide:{code}:{i}"))
        if len(row) == 3:  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(buttons)


async def on_category_done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ª–∞–π–¥–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π."""
    query = update.callback_query
    if not query:
        return
    selected: set[str] = context.user_data.get("selected_categories", set())
    if not selected:
        await query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
        return
    await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω—ã")

    # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if query.message:
        chosen_titles = ", ".join(CATEGORY_DISPLAY[c] for c in CATEGORY_ORDER if c in selected)
        try:
            await query.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_titles}\n\n–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä—ã —Å–ª–∞–π–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for code in CATEGORY_ORDER:
        if code not in selected:
            continue
        title = CATEGORY_DISPLAY[code]
        limit = _slides_count_for_category(code)
        paths = _list_slide_paths(code, limit)
        if not paths:
            await query.message.reply_text(f"{title}: –Ω–µ –Ω–∞—à–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ.")
            continue
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –∏–Ω–∞—á–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ
        if len(paths) > 1:
            medias: list[InputMediaPhoto] = [InputMediaPhoto(media=FSInputFile(str(p))) for p in paths]
            # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º
            medias[0].caption = f"{title}: –ø—Ä–∏–º–µ—Ä—ã"
            messages = await query.message.reply_media_group(media=medias)
            # –ö—ç—à–∏—Ä—É–µ–º file_id
            cache: dict[str, str] = context.application.bot_data.setdefault("file_id_cache", {})
            for p, m in zip(paths, messages):
                if m.photo:
                    cache[str(p)] = m.photo[-1].file_id
        else:
            p = paths[0]
            cache: dict[str, str] = context.application.bot_data.setdefault("file_id_cache", {})
            key = str(p)
            if key in cache:
                await query.message.reply_photo(photo=cache[key], caption=f"{title}: –ø—Ä–∏–º–µ—Ä")
            else:
                m = await query.message.reply_photo(photo=FSInputFile(key), caption=f"{title}: –ø—Ä–∏–º–µ—Ä")
                if m.photo:
                    cache[key] = m.photo[-1].file_id


async def on_slide_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    if not query or not query.data:
        return
    await query.answer()
    # –¢–µ–∫—É—â–∏–π —Ñ–ª–æ—É –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–ª–∞–π–¥–æ–≤; –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    try:
        if query.message:
            await query.message.delete()
    except Exception:
        pass


SUPPORTED_IMAGE_EXTS: tuple[str, ...] = (".jpg", ".jpeg", ".png", ".webp")

def _slides_dir_for(code: str) -> Path:
    return Path(__file__).resolve().parent / "slides" / code

def _resolve_slide_path(code: str, idx: int) -> Path | None:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ —Å–ª–∞–π–¥—É –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é –∏–º–µ–Ω –∏–ª–∏ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É –≤ –ø–∞–ø–∫–µ.

    1) –ò—â–µ–º `slides/<code>/<code>_<idx>.<ext>` —Å—Ä–µ–¥–∏ SUPPORTED_IMAGE_EXTS
    2) –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –±–µ—Ä—ë–º (idx)‚Äë–π —Ñ–∞–π–ª –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É —Å—Ä–µ–¥–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    """
    base = _slides_dir_for(code)
    if not base.exists() or not base.is_dir():
        return None

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–º–µ–Ω–∏
    for ext in SUPPORTED_IMAGE_EXTS:
        candidate = base / f"{code}_{idx}{ext}"
        if candidate.exists():
            return candidate

    # –§–æ–ª–ª–±–µ–∫: n‚Äë–π —Ñ–∞–π–ª –ø–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
    files = [p for p in base.iterdir() if p.suffix.lower() in SUPPORTED_IMAGE_EXTS and p.is_file()]
    files.sort(key=lambda p: p.name.lower())
    if 1 <= idx <= len(files):
        return files[idx - 1]
    return None


def _list_slide_paths(code: str, limit: int) -> list[Path]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–ª–∞–π–¥–∞–º –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –º–∞–∫—Å–∏–º—É–º limit.

    –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ ‚Äî –∏–º–µ–Ω–∞–º `<code>_1.ext ... <code>_N.ext`. –ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç,
    –¥–æ–±–∏—Ä–∞–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    result: list[Path] = []
    base = _slides_dir_for(code)
    if not base.exists():
        return result
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
    for i in range(1, limit + 1):
        p = _resolve_slide_path(code, i)
        if p and p.exists():
            result.append(p)
    if len(result) >= limit:
        return result[:limit]
    # –î–æ–±–æ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    files = [p for p in base.iterdir() if p.is_file() and p.suffix.lower() in SUPPORTED_IMAGE_EXTS]
    files.sort(key=lambda p: p.name.lower())
    for p in files:
        if p not in result:
            result.append(p)
            if len(result) >= limit:
                break
    return result[:limit]

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    if not update.message or not update.message.photo:
        return
    largest_photo = update.message.photo[-1]
    caption = update.message.caption or ""
    await update.message.reply_photo(photo=largest_photo.file_id, caption=caption)

SUPPORTED_EXTENSIONS = {".pdf", ".ppt", ".pptx"}

def _has_supported_ext(filename: str | None) -> bool:
    if not filename:
        return False
    lower = filename.lower()
    return any(lower.endswith(ext) for ext in SUPPORTED_EXTENSIONS)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç (PDF/PPT/PPTX) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª."""
    if not update.message or not update.message.document:
        return
    doc = update.message.document
    if not _has_supported_ext(doc.file_name):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ PDF, PPT –∏–ª–∏ PPTX."
        )
        return
    caption = update.message.caption or ""
    await update.message.reply_document(document=doc.file_id, caption=caption)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("design", design_quiz))
    application.add_handler(CommandHandler(["measure","price","portfolio","showroom","contacts","help"], on_command))
    
    # Callback –∫–Ω–æ–ø–∫–∏ –∫–≤–∏–∑–∞
    application.add_handler(CallbackQueryHandler(on_category_toggle, pattern=r"^cat:"))
    application.add_handler(CallbackQueryHandler(on_category_done, pattern=r"^cat_done$"))
    application.add_handler(CallbackQueryHandler(on_slide_selected, pattern=r"^slide:"))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
    async def _set_commands(app: Application) -> None:
        await app.bot.set_my_commands([
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("measure", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"),
            BotCommand("price", "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"),
            BotCommand("design", "–î–∏–∑–∞–π–Ω‚Äë–ø—Ä–æ–µ–∫—Ç"),
            BotCommand("portfolio", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç"),
            BotCommand("showroom", "–®–æ—É—Ä—É–º"),
            BotCommand("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
        ])

    application.post_init = _set_commands

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main()
