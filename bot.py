import os
import logging
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ BOT_TOKEN=\"–í–ê–®_–¢–û–ö–ï–ù\"")

def build_welcome_text(first_name: str | None) -> str:
    user_name = first_name or "–¥—Ä—É–≥"
    return (
        f"üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–±–µ–ª—å–Ω—É—é —Å—Ç—É–¥–∏—é –ï–≤—Ä–æ—Å–æ–±–∞, {user_name}!\n\n"
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—É—é –º–µ–±–µ–ª—å –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n"
        "üéØ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n\n"
        "üìè –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä ‚Äî /measure\n"
        "üí∞ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî /price\n"
        "üé® –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç ‚Äî /design\n"
        "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç ‚Äî /portfolio\n"
        "üè¢ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —à–æ—É—Ä—É–º ‚Äî /showroom\n"
        "üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî /contacts\n"
        "ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ (–æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å) ‚Äî /help\n\n"
        "üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç ‚Äî —è –ø–æ–π–º—É –∏ –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç!"
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return
    text = build_welcome_text(update.effective_user.first_name if update.effective_user else None)
    await update.message.reply_text(text)


async def on_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if not update.message:
        return
    cmd = update.message.text.lstrip("/").split()[0]
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å —Ç–µ–º–∏ –∂–µ —Ç–µ–∫—Å—Ç–∞–º–∏, —á—Ç–æ –∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    mapping = {
        "measure": "üìè –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä: –æ—Å—Ç–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –º—ã —Å–≤—è–∂–µ–º—Å—è.",
        "price": "üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º —Å–º–µ—Ç—É.",
        "design": "üé® –î–∏–∑–∞–π–Ω‚Äë–ø—Ä–æ–µ–∫—Ç: –ø—Ä–∏—à–ª–∏—Ç–µ –ø–ª–∞–Ω –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ü–µ–ø—Ç.",
        "portfolio": "üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: –æ—Ç–ø—Ä–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à.",
        "showroom": "üè¢ –®–æ—É—Ä—É–º: –∞–¥—Ä–µ—Å –∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–∏–∑–∏—Ç?",
        "contacts": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: —Ç–µ–ª–µ—Ñ–æ–Ω, WhatsApp, email. –ß–µ–º —É–¥–æ–±–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?",
        "help": "ü§ñ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!",
        "start": build_welcome_text(update.effective_user.first_name if update.effective_user else None),
    }
    reply = mapping.get(cmd, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.")
    # –î–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await update.message.reply_text(reply)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ —Ç–µ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    if not update.message or not update.message.photo:
        return
    largest_photo = update.message.photo[-1]
    caption = update.message.caption or ""
    await update.message.reply_photo(photo=largest_photo.file_id, caption=caption)

SUPPORTED_EXTENSIONS = {".pdf", ".ppt", ".pptx"}

def _has_supported_ext(filename: str | None) -> bool:
    if not filename:
        return False
    lower = filename.lower()
    return any(lower.endswith(ext) for ext in SUPPORTED_EXTENSIONS)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç (PDF/PPT/PPTX) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫–∞–∫ —Ñ–∞–π–ª."""
    if not update.message or not update.message.document:
        return
    doc = update.message.document
    if not _has_supported_ext(doc.file_name):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ PDF, PPT –∏–ª–∏ PPTX."
        )
        return
    caption = update.message.caption or ""
    await update.message.reply_document(document=doc.file_id, caption=caption)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    # –ö–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç–æ–º
    application.add_handler(CommandHandler(["measure","price","design","portfolio","showroom","contacts","help"], on_command))
    
    # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    # application.add_handler(CallbackQueryHandler(on_button))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞
    async def _set_commands(app: Application) -> None:
        await app.bot.set_my_commands([
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("measure", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"),
            BotCommand("price", "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"),
            BotCommand("design", "–î–∏–∑–∞–π–Ω‚Äë–ø—Ä–æ–µ–∫—Ç"),
            BotCommand("portfolio", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ä–∞–±–æ—Ç"),
            BotCommand("showroom", "–®–æ—É—Ä—É–º"),
            BotCommand("contacts", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
        ])

    application.post_init = _set_commands

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()

if __name__ == '__main__':
    main()
